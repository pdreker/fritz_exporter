[tool.poetry]
name = "fritz-exporter"
version = "2.5.0"
description = "Prometheus exporter for AVM Fritz! Devices"
authors = ["Patrick Dreker <patrick@dreker.de>"]
license = "Apache 2.0"
readme = "README.md"
homepage = "https://github.com/pdreker/fritz_exporter"
repository = "https://github.com/pdreker/fritz_exporter"
documentation = "https://fritz-exporter.readthedocs.io"
keywords = ["prometheus", "fritz", "router", "grafana"]
classifiers = [
    "Development Status :: 6 - Mature",
    "Environment :: Console",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: System :: Monitoring"
]
include = [ "LICENSE.md" ]
packages = [{include = "fritzexporter"}]

[tool.poetry.dependencies]
python = "^3.11"
prometheus-client = ">=0.6.0"
fritzconnection = ">=1.0.0"
pyyaml = "*"
requests = "*"
attrs = ">=22.2,<24.0"
defusedxml = "^0.7.1"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-mock = "*"
types-pyyaml = "*"
types-requests = "*"
mypy = ">=0.971,<1.10"
coverage = ">=6.4.4,<8.0.0"
pytest-cov = ">=3,<5"
ruff = ">=0.1.7,<0.4.0"

[tool.poetry.scripts]
fritzexporter = "fritzexporter.__main__:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov-branch --cov . --cov-report xml --cov-config .coveragerc"
testpaths = [
    "tests",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = [
    "tests",
    "docs",
]

# other rules:
# * "DJ" for Django
# * "PYI" for type stubs etc.
# * "PD" for PandasVet
# * "NPY" for NumPy

select = [
    "E", "W", # PyCodeStyle
    "F", # PyFlakes
    "C90", # McCabe (Function Complexity
    "I", # ISort
    "N", # PEP8 Naming Conventions
    # "D", # PyDocStyle
    "UP", # pyupgrade
    "YTT", # flake8-2020 ('Yield from' etc.)
    "ANN", # flake8-annotations (missing type annotations)
    "ASYNC", # flake8-async (various async issues)
    "S", # flake8-bandit (security issues)
    "BLE", # blind exceptions
    "FBT", # boolean traps (Anti-Pattern, Google it.)
    "B", # bugbear (various anti-patterns)
    "A", # flake8-builtins (shadowing builtins)
    "COM", # flake8-commas (comma placement at line-end)
    "C4", # flake8-comprehensions (comprehension issues like unnecessary list comprehensions etc.)
    "DTZ", # avoid usage of naive datetime objects
    "T10", # watch for Debugger imports
    "EM", # ensure error messages are not formatted as f-strings and similar
    "FA", # flake8-future-annotations (ensure type hint annotation use mnodern syntax)
    "ISC", # implicit string concatenation
    "G", # flake8-logging-format (ensure logging format strings are valid)
    "INP", # do not use implicit namspace packages
    "PIE", # various anti-patterns and misfeatures
    "T20", # watch for print() calls
    "PT", # pytest style issues
    "Q", # quotes (ensure consistent usage of single/double quotes)
    "RSE", # some "raise" syntax issues
    "RET", # return values anti-patterns
    "SLF", # flake8-self (do not access "_private" attributes from outside)
    "SLOT", # flake8-slots (ensure usage of __slots__)
    "SIM", # flake8-simplify (simplify various constructs)
    "INT", # gettext issues (format strings etc.)
    "ARG", # disallow unused arguments
    "PTH", # use pathlib instead of os.path
    "TD", # enforce some syntax on TODO comments
    "FIX", # highlight TODO, FIXME, XXX etc.
    "PGH", # pygrep-hooks (policing "noqa" and similar)
    "PL", # PyLint (various issues)
    "TRY", # try/except/else/finally anti-patterns (try.ceratops)
    "FLY", # join vs. f-strings
    "PERF", # various performance issues
    "FURB", # modernize various constructs
    "LOG", # logging issues
    "RUF", # ruff (various issues)
]

ignore = ['E203', 'COM812', 'ISC001', 'ANN101', 'ANN102', 'ANN204']

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
exclude = [
    '^tests/',
    '^docs/',
]

[[tool.mypy.overrides]]
module = "fritzconnection.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "defusedxml.*"
ignore_missing_imports = true